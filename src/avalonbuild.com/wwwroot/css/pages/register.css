#register .alert.validation-summary-errors{padding:8px 14px;margin-bottom:20px;text-shadow:0 1px 0 rgba(255,255,255,.5);border:1px solid #eed3d7;border-radius:.25em;color:#b94a48;background-color:#f2dede}#register .show.alert.validation-summary-errors{display:block}#register .field{position:relative;display:block;float:none;margin:1.625em 0;padding:0}#register .field label{display:block;overflow:hidden;white-space:nowrap;text-overflow:ellipsis;position:relative;top:auto;left:auto;width:auto}#register .hint,#register .hint:before{position:absolute;opacity:0;transition:all .25s linear}#register .hint{box-sizing:border-box;display:inline-block;visibility:hidden;background:#444;color:#fff;padding:.25em .5em;text-align:center;z-index:1;top:100%;margin:.75em 0 0}#register .hint:before{content:" ";width:0;height:0;border-width:.5em;border-style:solid;top:-14px;left:50%;margin-top:0;margin-left:-7px;border-color:transparent transparent #444}#register :invalid+.hint{color:#fff;background:red}#register :focus+.hint{visibility:visible;opacity:1}#register :focus+.hint:before{opacity:1}#register :invalid+.hint:before{border-right-color:transparent;border-bottom-color:red}#register form{text-align:left;flex-basis:auto;margin-left:.75rem;margin-right:.75rem;flex-grow:1;flex-shrink:1;align-self:auto}@media screen and (min-width:41.5rem){#register form{flex-basis:auto;margin-left:5.75rem;margin-right:5.75rem;flex-grow:1;flex-shrink:1;align-self:auto}}@media screen and (min-width:61.5rem){#register form{flex-basis:auto;margin-left:15.75rem;margin-right:15.75rem;flex-grow:1;flex-shrink:1;align-self:auto}}@media screen and (min-width:81.5rem){#register form{flex-basis:auto;margin-left:25.75rem;margin-right:25.75rem;flex-grow:1;flex-shrink:1;align-self:auto}}#register form input{width:100%}#register p{text-align:right}#register .alert ul{margin:0;padding:0;list-style:none}#register .alert.validation-summary-errors{display:block}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
