#user-add .alert.validation-summary-errors{padding:8px 14px;margin-bottom:20px;text-shadow:0 1px 0 rgba(255,255,255,.5);border:1px solid #eed3d7;border-radius:.25em;color:#b94a48;background-color:#f2dede}#user-add .show.alert.validation-summary-errors{display:block}#user-add .field{position:relative;display:block;float:none;margin:1.625em 0;padding:0}#user-add .field label{display:block;overflow:hidden;white-space:nowrap;text-overflow:ellipsis;position:relative;top:auto;left:auto;width:auto}#user-add .hint,#user-add .hint:before{position:absolute;opacity:0;transition:all .25s linear}#user-add .hint{box-sizing:border-box;display:inline-block;visibility:hidden;background:#444;color:#fff;padding:.25em .5em;text-align:center;z-index:1;top:100%;margin:.75em 0 0}#user-add .hint:before{content:" ";width:0;height:0;border-width:.5em;border-style:solid;top:-14px;left:50%;margin-top:0;margin-left:-7px;border-color:transparent transparent #444}#user-add :invalid+.hint{color:#fff;background:red}#user-add :focus+.hint{visibility:visible;opacity:1}#user-add :focus+.hint:before{opacity:1}#user-add :invalid+.hint:before{border-right-color:transparent;border-bottom-color:red}#user-add form{text-align:left;flex-basis:auto;margin-left:.75rem;margin-right:.75rem;flex-grow:1;flex-shrink:1;align-self:auto}@media screen and (min-width:41.5rem){#user-add form{flex-basis:auto;margin-left:5.75rem;margin-right:5.75rem;flex-grow:1;flex-shrink:1;align-self:auto}}@media screen and (min-width:61.5rem){#user-add form{flex-basis:auto;margin-left:15.75rem;margin-right:15.75rem;flex-grow:1;flex-shrink:1;align-self:auto}}@media screen and (min-width:81.5rem){#user-add form{flex-basis:auto;margin-left:25.75rem;margin-right:25.75rem;flex-grow:1;flex-shrink:1;align-self:auto}}#user-add form input{width:100%}#user-add p{text-align:right}#user-add .alert ul{margin:0;padding:0;list-style:none}#user-add .alert.validation-summary-errors{display:block}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
