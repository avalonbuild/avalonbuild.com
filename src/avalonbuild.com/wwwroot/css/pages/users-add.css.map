{"version":3,"sources":["pages/users-add.scss","../lib/watercolor/extends/_alert.scss","../lib/watercolor/defaults/_alert.scss","pages/users-add.css","../lib/watercolor/extends/_field.scss","../lib/watercolor/extends/_hint.scss","../lib/watercolor/defaults/_hint.scss","../lib/watercolor/modules/_grid.scss"],"names":[],"mappings":"AAUA,2CCMC,YAAa,CACb,gBAA0B,CAC1B,kBAAmB,CACnB,sCAA6C,CAC7C,wBCV+B,CDW/B,wBCV2B,CDW3B,mBAAoB,CACpB,aEdD,CHCA,gDCgBE,aEbF,CHHA,2CCmCG,aC5BwB,CD6BxB,wBC5BmC,CD6BnC,oBE5BH,CHTA,iBIOC,iBAAkB,CAClB,aDMD,CHdA,uBIWE,aAAc,CACd,eAAgB,CAChB,kBAAmB,CACnB,sBDOF,CHrBA,iBIuBC,UAAW,CACX,gBAA4B,CAC5B,SDED,CH3BA,uBI4BE,iBAAkB,CAClB,QAAS,CACT,SAAU,CACV,UDGF,CHlCA,gBKQC,qBAAsB,CACtB,iBAAkB,CAClB,oBAAqB,CACrB,iBAAkB,CAClB,SAAU,CACV,eCb2B,CDc3B,UCfgB,CDgBhB,kBAAmB,CACnB,iBAAkB,CAClB,iBAAkB,CAElB,SF6BD,CHhDA,sBKsBE,2BF8BF,CHpDA,uBK0BE,WAAY,CACZ,iBAAkB,CAClB,OAAQ,CACR,SAAU,CACV,SAAU,CACV,OAAQ,CACR,QAAS,CACT,gBAAiB,CAMjB,6BAAgC,CAAhC,uBF8BF,CHrEA,yBK4CE,UC1CuB,CD2CvB,cF6BF,CH1EA,gCKgDG,sBF8BH,CH9EA,uBKqDE,kBAAmB,CACnB,SF6BF,CHnFA,8BKyDG,SF8BH,CHvFA,gBK8FC,QAAS,CAET,gBFHD,CH7FA,uBKmGE,SAAU,CACV,QAAS,CACT,YAAa,CACb,gBAAiB,CAIjB,yCFFF,CHxGA,gCKgHC,8BAA+B,CAC/B,uBFJD,CH7GA,eAGE,eAAgB,CO0UhB,eAAgB,CAmBjB,kBAA4E,CAe5E,mBAA6E,CAiB5E,WAAY,CAwBZ,aAAc,CAwBd,eJzTF,CI1EC,sCP7CD,eO6UE,eAAgB,CAmBjB,mBAA4E,CAe5E,oBAA6E,CAiB5E,WAAY,CAwBZ,aAAc,CAwBd,eJ/SA,CACF,CIrFC,sCP7CD,eO6UE,eAAgB,CAmBjB,oBAA4E,CAe5E,qBAA6E,CAiB5E,WAAY,CAwBZ,aAAc,CAwBd,eJpSA,CACF,CIhGC,sCP7CD,eO6UE,eAAgB,CAmBjB,oBAA4E,CAe5E,qBAA6E,CAiB5E,WAAY,CAwBZ,aAAc,CAwBd,eJzRA,CACF,CHxJA,qBAoBG,UGwIH,CH5JA,YAyBE,gBGuIF,CHhKA,oBAuCG,QAAS,CACT,SAAU,CACV,eG6HH,CHtKA,2CA6CG,aG6HH","file":"users-add.css","sourcesContent":["@import \"site/settings\";\r\n@import \"watercolor/modules/grid\";\r\n@import \"watercolor/elements/alert\";\r\n@import \"watercolor/elements/field\";\r\n@import \"watercolor/elements/hint\";\r\n\r\n//\r\n// Add User\r\n//\r\n\r\n#user-add {\r\n\r\n\tform {\r\n\t\ttext-align: left;\r\n\r\n\t\t@include column;\r\n\r\n\t\t@include breakpoint(medium) {\r\n            @include column($prefix: 1, $suffix: 1);\r\n        }\r\n\r\n\t\t@include breakpoint(large) {\r\n            @include column($prefix: 3, $suffix: 3);\r\n        }\r\n\r\n\t\t@include breakpoint(extra-large) {\r\n            @include column($prefix: 5, $suffix: 5);\r\n        }\r\n\r\n\t\tinput {\r\n\t\t\twidth: 100%;\r\n\t\t}\r\n\t}\r\n\r\n\tp {\r\n\t\ttext-align: right;\r\n\t}\r\n\r\n\t.field {\r\n\t\t@include field;\r\n\t}\r\n\r\n\t.hint {\r\n\t\t@include hint(inline);\r\n\t}\r\n\r\n\t.alert {\r\n\r\n\t\tul {\r\n\t\t\tmargin: 0;\r\n\t\t\tpadding: 0;\r\n\t\t\tlist-style: none;\r\n\t\t}\r\n\r\n\t\t&.validation-summary-errors {\r\n\t\t\tdisplay: block;\r\n\t\t\t@include alert(error);\r\n\t\t}\r\n\t}\r\n}","////\r\n///\r\n/// Alert placeholders\r\n///\r\n/// @group alert\r\n/// @author Clint Kolodziej\r\n///\r\n////\r\n\r\n@import \"../defaults/alert\";\r\n\r\n///\r\n/// Alert default\r\n///\r\n\r\n%alert {\r\n\tdisplay: none;\r\n\tpadding: 8px 14px 8px 14px;\t\t\t\t\t\t//TODO: adjust for vertical rhythm\r\n\tmargin-bottom: 20px;\t\t\t\t\t\t\t//TODO: adjust for vertical rhythm\r\n\ttext-shadow: 0 1px 0 rgba(255, 255, 255, 0.5);\t//TODO: add variable (maybe)\r\n\tbackground-color: $alert-background-color;\r\n\tborder: 1px solid $alert-border-color;\r\n\tborder-radius: .25em;\r\n\tcolor: $alert-color;\r\n\r\n\t&.show {\r\n\t\tdisplay: block;\r\n\t}\r\n}\r\n\r\n///\r\n/// Alert success\r\n///\r\n\r\n%alert-success {\r\n\t  color: $alert-success-color;\r\n\t  background-color: $alert-success-background-color;\r\n\t  border-color: $alert-success-border-color;\r\n}\r\n\r\n///\r\n/// Alert error\r\n///\r\n\r\n%alert-error {\r\n\t  color: $alert-error-color;\r\n\t  background-color: $alert-error-background-color;\r\n\t  border-color: $alert-error-border-color;\r\n}","////\r\n///\r\n/// Alert default variables\r\n///\r\n/// @group elements\r\n/// @author Clint Kolodziej\r\n///\r\n////\r\n\r\n$alert-color: inherit !default;\r\n$alert-background-color: #fcf8e3 !default;\r\n$alert-border-color: #fbeed5 !default;\r\n\r\n$alert-success-color: #468847 !default;\r\n$alert-success-background-color: #dff0d8 !default;\r\n$alert-success-border-color: #d6e9c6 !default;\r\n\r\n$alert-error-color: #b94a48 !default;\r\n$alert-error-background-color: #f2dede !default;\r\n$alert-error-border-color: #eed3d7 !default;","#user-add .alert.validation-summary-errors {\n  display: none;\n  padding: 8px 14px 8px 14px;\n  margin-bottom: 20px;\n  text-shadow: 0 1px 0 rgba(255, 255, 255, 0.5);\n  background-color: #fcf8e3;\n  border: 1px solid #fbeed5;\n  border-radius: .25em;\n  color: inherit;\n}\n\n#user-add .show.alert.validation-summary-errors {\n  display: block;\n}\n\n#user-add .alert.validation-summary-errors {\n  color: #b94a48;\n  background-color: #f2dede;\n  border-color: #eed3d7;\n}\n\n#user-add .field {\n  position: relative;\n  display: block;\n}\n\n#user-add .field label {\n  display: block;\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n}\n\n#user-add .field {\n  float: none;\n  margin: 1.625em 0;\n  padding: 0;\n}\n\n#user-add .field label {\n  position: relative;\n  top: auto;\n  left: auto;\n  width: auto;\n}\n\n#user-add .hint {\n  box-sizing: border-box;\n  position: absolute;\n  display: inline-block;\n  visibility: hidden;\n  opacity: 0;\n  background: #444;\n  color: #fff;\n  padding: .25em .5em;\n  margin-left: .75em;\n  text-align: center;\n  z-index: 1;\n}\n\n#user-add .hint:empty {\n  visibility: hidden !important;\n}\n\n#user-add .hint:before {\n  content: \" \";\n  position: absolute;\n  top: 1em;\n  left: -1em;\n  opacity: 0;\n  width: 0;\n  height: 0;\n  margin-top: -.5em;\n  border-width: .5em;\n  border-style: solid;\n  border-color: #444;\n  border-top-color: transparent;\n  border-left-color: transparent;\n  border-bottom-color: transparent;\n}\n\n#user-add *:invalid + .hint {\n  color: #fff;\n  background: red;\n}\n\n#user-add *:invalid + .hint:before {\n  border-right-color: red;\n}\n\n#user-add *:focus + .hint {\n  visibility: visible;\n  opacity: 1;\n}\n\n#user-add *:focus + .hint:before {\n  opacity: 1;\n}\n\n#user-add .hint {\n  top: 100%;\n  margin: 0;\n  margin-top: .75em;\n}\n\n#user-add .hint:before {\n  top: -14px;\n  left: 50%;\n  margin-top: 0;\n  margin-left: -7px;\n  border-top-color: transparent;\n  border-left-color: transparent;\n  border-right-color: transparent;\n  border-bottom-color: #444;\n}\n\n#user-add *:invalid + .hint:before {\n  border-right-color: transparent;\n  border-bottom-color: red;\n}\n\n#user-add form {\n  text-align: left;\n  flex-basis: auto;\n  margin-left: 0.75rem;\n  margin-right: 0.75rem;\n  flex-grow: 1;\n  flex-shrink: 1;\n  align-self: auto;\n}\n\n@media screen and (min-width: 41.5rem) {\n  #user-add form {\n    flex-basis: auto;\n    margin-left: 5.75rem;\n    margin-right: 5.75rem;\n    flex-grow: 1;\n    flex-shrink: 1;\n    align-self: auto;\n  }\n}\n\n@media screen and (min-width: 61.5rem) {\n  #user-add form {\n    flex-basis: auto;\n    margin-left: 15.75rem;\n    margin-right: 15.75rem;\n    flex-grow: 1;\n    flex-shrink: 1;\n    align-self: auto;\n  }\n}\n\n@media screen and (min-width: 81.5rem) {\n  #user-add form {\n    flex-basis: auto;\n    margin-left: 25.75rem;\n    margin-right: 25.75rem;\n    flex-grow: 1;\n    flex-shrink: 1;\n    align-self: auto;\n  }\n}\n\n#user-add form input {\n  width: 100%;\n}\n\n#user-add p {\n  text-align: right;\n}\n\n#user-add .alert ul {\n  margin: 0;\n  padding: 0;\n  list-style: none;\n}\n\n#user-add .alert.validation-summary-errors {\n  display: block;\n}\n","////\r\n///\r\n/// Field placeholders\r\n///\r\n/// @group field\r\n/// @author Clint Kolodziej\r\n///\r\n////\r\n\r\n@import \"../modules/grid\";\r\n@import \"../defaults/field\";\r\n\r\n///\r\n/// Field default\r\n///\r\n\r\n%field {\r\n\tposition: relative;\r\n\tdisplay: block;\r\n\t\r\n\t& label {\r\n\t\tdisplay: block;\r\n\t\toverflow: hidden;\r\n\t\twhite-space: nowrap;\r\n\t\ttext-overflow: ellipsis;\r\n\t}\r\n}\r\n\r\n//\r\n// Field shown in block display\r\n//\r\n\r\n%field-block {\r\n\tfloat: none;\r\n\tmargin: $line-height * 1em 0;\r\n\tpadding: 0;\r\n\r\n\t& label {\r\n\t\tposition: relative;\r\n\t\ttop: auto;\r\n\t\tleft: auto;\r\n\t\twidth: auto;\r\n\t}\r\n}\r\n\r\n//\r\n// Field shown in inline display\r\n//\r\n\r\n%field-inline {\r\n\tfloat: left;\r\n\tmargin: $line-height * 1em $line-height * 1em 0 0;\r\n\tpadding: 0;\r\n\r\n\t&:last-child {\r\n\t\tmargin-bottom: $line-height * 1em;\r\n\t}\r\n\r\n\t& label {\r\n\t\tposition: relative;\r\n\t\ttop: auto;\r\n\t\tleft: auto;\r\n\t\twidth: auto;\r\n\t}\r\n}\r\n\r\n//\r\n// Field shown in aligned display\r\n//\r\n\r\n%field-align {\r\n\tfloat: none;\r\n\tmargin: $line-height * 1em 0;\r\n\tpadding: 0 0 0 25%;\r\n\r\n\t& label {\r\n\t\tposition: absolute;\r\n\t\ttop: 0;\r\n\t\tleft: 0;\r\n\t\twidth: 25%;\r\n\t}\r\n}","////\r\n///\r\n/// Hint placeholders\r\n///\r\n/// @group hint\r\n/// @author Clint Kolodziej\r\n///\r\n////\r\n\r\n@import \"../modules/grid\";\r\n@import \"../defaults/hint\";\r\n\r\n//\r\n// Hint default\r\n//\r\n\r\n%hint {\r\n\r\n\tbox-sizing: border-box;\r\n\tposition: absolute;\r\n\tdisplay: inline-block;\r\n\tvisibility: hidden;\r\n\topacity: 0;\r\n\tbackground: $hint-background-color;\r\n\tcolor: $hint-color;\r\n\tpadding: .25em .5em;\r\n\tmargin-left: .75em;\r\n\ttext-align: center;\r\n\t//transition: all .25s linear;\r\n\tz-index: 1;\r\n\r\n\t&:empty {\r\n\t\tvisibility: hidden !important;\r\n\t}\r\n\r\n\t&:before {\r\n\t\tcontent: \" \";\r\n\t\tposition: absolute;\r\n\t\ttop: 1em;\r\n\t\tleft: -1em;\r\n\t\topacity: 0;\r\n\t\twidth: 0;\r\n\t\theight: 0;\r\n\t\tmargin-top: -.5em;\r\n\t\tborder-width: .5em;\r\n\t\tborder-style: solid;\r\n\t\tborder-color: $hint-background-color;\r\n\t\tborder-top-color: transparent;\r\n\t\tborder-left-color: transparent;\r\n\t\tborder-bottom-color: transparent;\r\n\t\t//transition: all .25s linear;\r\n\t}\r\n\r\n\t*:invalid + & {\r\n\t\tcolor: $hint-invalid-color;\r\n\t\tbackground: $hint-invalid-background-color;\r\n\r\n\t\t&:before {\r\n\t\t\tborder-right-color: $hint-invalid-background-color;\r\n\t\t}\r\n\t}\r\n\r\n\t*:focus + & {\r\n\t\tvisibility: visible;\r\n\t\topacity: 1;\r\n\r\n\t\t&:before {\r\n\t\t\topacity: 1;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n//\r\n// Hint in block display\r\n//\r\n\r\n%hint-block {\r\n\ttop: auto;\r\n\tmargin: 0;\r\n\tmargin-left: .75em;\r\n\r\n\t&:before {\r\n\t\ttop: 1em;\r\n\t\tleft: -14px;\r\n\t\tmargin-top: -7px;\r\n\t\tmargin-left: 0;\r\n\t\tborder-top-color: transparent;\r\n\t\tborder-left-color: transparent;\r\n\t\tborder-right-color: $hint-background-color;\r\n\t\tborder-bottom-color: transparent;\r\n\t}\r\n\r\n}\r\n\r\n*:invalid + %hint-block:before {\r\n\tborder-right-color: $hint-invalid-background-color;\r\n\tborder-bottom-color: transparent;\r\n}\r\n\r\n//\r\n// Hint in inline display\r\n//\r\n\r\n%hint-inline {\r\n\ttop: 100%;\r\n\tmargin: 0;\r\n\tmargin-top: .75em;\r\n\r\n\t&:before {\r\n\t\ttop: -14px;\r\n\t\tleft: 50%;\r\n\t\tmargin-top: 0;\r\n\t\tmargin-left: -7px;\r\n\t\tborder-top-color: transparent;\r\n\t\tborder-left-color: transparent;\r\n\t\tborder-right-color: transparent;\r\n\t\tborder-bottom-color: $hint-background-color;\r\n\t}\r\n\r\n}\r\n\r\n*:invalid + %hint-inline:before {\r\n\tborder-right-color: transparent;\r\n\tborder-bottom-color: $hint-invalid-background-color;\r\n}\r\n\r\n//\r\n// Hint in aligned display\r\n//\r\n\r\n%hint-align {\r\n\ttop: auto;\r\n\tmargin: 0;\r\n\tmargin-left: .75em;\r\n\r\n\t&:before {\r\n\t\ttop: 1em;\r\n\t\tleft: -14px;\r\n\t\tmargin-top: -7px;\r\n\t\tmargin-left: 0;\r\n\t\tborder-top-color: transparent;\r\n\t\tborder-left-color: transparent;\r\n\t\tborder-right-color: $hint-background-color;\r\n\t\tborder-bottom-color: transparent;\r\n\t}\r\n\r\n}\r\n\r\n*:invalid + %hint-align:before {\r\n\tborder-right-color: $hint-invalid-background-color;\r\n\tborder-bottom-color: transparent;\r\n}","////\r\n///\r\n/// Hint default variables\r\n///\r\n/// @group elements\r\n/// @author Clint Kolodziej\r\n///\r\n////\r\n\r\n$hint-color: #fff !default;\r\n$hint-background-color: #444 !default;\r\n\r\n$hint-invalid-color: #fff !default;\r\n$hint-invalid-background-color: red !default;","﻿////\r\n///\r\n/// Grid related mixins to help style the grid container, columns, and text\r\n///\r\n/// @group grid\r\n/// @author Clint Kolodziej\r\n///\r\n////\r\n\r\n@import \"../defaults/grid\";\r\n\r\n///\r\n/// Build the container based on the breakpoint settings (default breakpoints are: default, small, medium, large, extra-large)\r\n///\r\n/// @example scss - Usage\r\n///\t\t.container {\r\n///\t\t\t@include container;\r\n///\t\t}\r\n///\r\n\r\n@mixin container() {\r\n\tbox-sizing: border-box;\r\n\tmargin: 0 auto;\r\n\tpadding-right: $gutter-width * 0.5;\r\n\tpadding-left: $gutter-width * 0.5;\r\n\t\r\n\t@each $size, $cols in $breakpoints {\r\n\t\t\t\t\r\n\t\t@if $size == default {\r\n\t\t\twidth: $cols * ($column-width + $gutter-width);\r\n\t\t}\r\n\t\t@else {\r\n\t\t\t@include breakpoint($size) {\r\n\t\t\t\twidth: $cols * ($column-width + $gutter-width);\r\n\t\t\t}\r\n\t\t}\r\n\t}\t\r\n}\r\n\r\n///\r\n/// Insert the given content within a media query given the breakpoint size\r\n///\r\n/// @parameter {number} $point - The breakpoint that the content should be applied to. Values: `default`, `small`, `medium`, `large`, `extra-large` (if using grid defaults)\r\n///\r\n/// @example scss - Usage\r\n///\t\tdiv {\r\n///\t\t\t@include breakpoint(large) {\r\n///\t\t\t\tcolor: red;\r\n///\t\t\t}\r\n///\t\t}\r\n///\r\n\r\n@mixin breakpoint($point) {\r\n\t$break: ($column-width + $gutter-width) * map-get($breakpoints, $point) + $gutter-width;\r\n\t\r\n\t@media screen and (min-width: $break) {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n///\r\n/// Set the element as a grid container with given type, direction, margin-adjustment, wrapping, justification, and alignment\r\n///\r\n/// @parameter {string} $type [row] - Type of grid. Values: `row`, `column`\r\n/// @parameter {string} $direction [forward] - Direction that the grid items should follow. Values: `forward`, `reverse`\r\n/// @parameter {string} $wrap [wrap] - Should the content be wrapped or not. Values: `wrap`, `no-wrap`, `reverse`\r\n/// @parameter {string} $justify [start] - How to justify the columns within the available space. Values: `start`, `end`, `center`, `between`, `around`\r\n/// @parameter {string} $align-items [stretch] - Alignment method for child columns on the cross axis (basically vertical align for child columns). Values: `stretch`, `start`, `end`, `center`, `baseline`\r\n/// @parameter {string} $align-content [stretch] - Alignment method for the grid content on the cross axis (basically vertical align for the entire content of the grid). Values: `stretch`, `start`, `end`, `center`, `between`, `around`\r\n/// @parameter {boolean} $margin-adjust [true] - Whether the grid should adjust the outer margin to allow it to align with non-grid content. Values: `true`, `false`\r\n///\r\n/// @example scss - Usage\r\n///\t\tsection {\r\n///\t\t\t@include grid;\r\n///\t\t}\r\n///\r\n\r\n@mixin grid($type: row, $direction: forward, $wrap: wrap, $justify: start, $align-items: stretch, $align-content: stretch, $margin-adjust: true) {\r\n\t@include grid-type($type, $direction);\r\n\t@include grid-wrap($wrap);\r\n\t@include grid-justify($justify);\t\r\n\t@include grid-align-items($align-items);\r\n\t@include grid-align-content($align-content);\r\n\t@include grid-margin-adjust($type, $margin-adjust);\r\n}\r\n\r\n///\r\n/// Set the element as a specific grid type and direction\r\n///\r\n/// @parameter {string} $type [row] - Type of grid. Values: `row`, `column`\r\n/// @parameter {string} $direction [forward] - Direction that the grid items should follow. Values: `forward`, `reverse`\r\n///\r\n/// @example scss - Usage\r\n///\t\tsection {\r\n///\t\t\t@include grid-type($type: row, $direction: reverse);\r\n///\t\t}\r\n///\r\n\r\n@mixin grid-type($type: row, $direction: forward) {\r\n\t\r\n\tdisplay: flex;\r\n\t\r\n\t@if $type == row {\r\n\t\r\n\t\t@if $direction == forward {\r\n\t\t\tflex-direction: row;\r\n\t\t}\t\r\n\t\t@else if $direction == reverse {\r\n\t\t\tflex-direction: row-reverse;\r\n\t\t}\t\r\n\t}\r\n\t@else if $type == column {\r\n\t\t\r\n\t\t@if $direction == forward {\r\n\t\t\tflex-direction: column;\r\n\t\t}\r\n\t\t@else if $direction == reverse {\r\n\t\t\tflex-direction: column-reverse;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n///\r\n/// Set how the grid will deal with content that is longer than one line\r\n///\r\n/// @parameter {string} $wrap [wrap] - Should the content be wrapped or not. Values: `wrap`, `no-wrap`, `reverse`\r\n///\r\n/// @example scss - Usage\r\n///\t\tsection {\r\n///\t\t\t@include grid-wrap(no-wrap);\r\n///\t\t}\r\n///\r\n\r\n@mixin grid-wrap($wrap: wrap) {\r\n\t\r\n\t@if $wrap == no-wrap {\r\n\t\tflex-wrap: nowrap;\r\n\t}\r\n\t@if $wrap == wrap {\r\n\t\tflex-wrap: wrap;\r\n\t}\r\n\t@else if $wrap == reverse {\r\n\t\tflex-wrap: wrap-reverse;\r\n\t}\r\n}\r\n\r\n///\r\n/// Set how the grid will justify content when there is unused space on a line\r\n///\r\n/// @parameter {string} $justify [start] - How to justify the columns within the available space. Values: `start`, `end`, `center`, `between`, `around`\r\n///\r\n/// @example scss - Usage\r\n///\t\tsection {\r\n///\t\t\t@include grid-justify(center);\r\n///\t\t}\r\n///\r\n\r\n@mixin grid-justify($justify: start) {\r\n\t\r\n\t@if $justify == start {\r\n\t\tjustify-content: flex-start;\r\n\t}\t\r\n\t@if $justify == end {\r\n\t\tjustify-content: flex-end;\r\n\t}\r\n\t@else if $justify == center {\r\n\t\tjustify-content: center;\r\n\t}\r\n\t@else if $justify == between {\r\n\t\tjustify-content: space-between;\r\n\t}\r\n\t@else if $justify == around {\r\n\t\tjustify-content: space-around;\r\n\t}\r\n}\r\n\r\n///\r\n/// Set how the grid will vertically align child elements by default and how the entire grid content vertically aligns when there is extra space\r\n///\r\n/// @parameter {string} $align-items [stretch] - Alignment method for child columns on the cross axis (basically vertical align for child columns). Values: `stretch`, `start`, `end`, `center`, `baseline`\r\n/// @parameter {string} $align-content [stretch] - Alignment method for the grid content on the cross axis (basically vertical align for the entire content of the grid). Values: `stretch`, `start`, `end`, `center`, `between`, `around`\r\n///\r\n/// @example scss - Usage\r\n///\t\tsection {\r\n///\t\t\t@include grid-align(center, center);\r\n///\t\t}\r\n///\r\n\r\n@mixin grid-align($align-items: stretch, $align-content: stretch) {\t\r\n\t@include grid-align-items($align-items);\r\n\t@include grid-align-content($align-content);\r\n}\r\n\t\r\n///\r\n/// Set how the grid will vertically align child elements by default\r\n///\r\n/// @parameter {string} $align [stretch] - Alignment method for child columns on the cross axis (basically vertical align for child columns). Values: `stretch`, `start`, `end`, `center`, `baseline`\r\n///\r\n/// @example scss - Usage\r\n///\t\tsection {\r\n///\t\t\t@include grid-align-items(end);\r\n///\t\t}\r\n///\r\n\r\n@mixin grid-align-items($align: stretch) {\r\n\t\r\n\t@if $align == stretch {\r\n\t\talign-items: stretch;\r\n\t}\t\r\n\t@else if $align == start {\r\n\t\talign-items: flex-start;\r\n\t}\r\n\t@else if $align == end {\r\n\t\talign-items: flex-end;\r\n\t}\r\n\t@else if $align == center {\r\n\t\talign-items: center;\r\n\t}\r\n\t@else if $align == baseline {\r\n\t\talign-items: baseline;\r\n\t}\r\n}\r\n\r\n///\r\n/// Set how the entire grid content vertically aligns when there is extra space\r\n///\r\n/// @parameter {string} $align [stretch] - Alignment method for the grid content on the cross axis (basically vertical align for the entire content of the grid). Values: `stretch`, `start`, `end`, `center`, `between`, `around`\r\n///\r\n/// @example scss - Usage\r\n///\t\tsection {\r\n///\t\t\t@include grid-align-content(center);\r\n///\t\t}\r\n///\r\n\r\n@mixin grid-align-content($align: stretch) {\r\n\t\r\n\t@if $align == stretch {\r\n\t\talign-content: stretch;\r\n\t}\t\r\n\t@else if $align == start {\r\n\t\talign-content: flex-start;\r\n\t}\r\n\t@else if $align == end {\r\n\t\talign-content: flex-end;\r\n\t}\r\n\t@else if $align == center {\r\n\t\talign-content: center;\r\n\t}\r\n\t@else if $align == between {\r\n\t\talign-content: space-between;\r\n\t}\r\n\t@else if $align == around {\r\n\t\talign-content: space-around;\r\n\t}\r\n}\r\n\r\n///\r\n/// Set how the grid adjusts the margin to allow it to align with non-grid content\r\n///\r\n/// @parameter {boolean} $margin-adjust [true] - Whether the grid should adjust the outer margin to allow it to align with non-grid content. Values: `true`, `false`\r\n///\r\n/// @example scss - Usage\r\n///\t\tsection {\r\n///\t\t\t@include grid-margin-adjust($type: row, $margin-adjust: false);\r\n///\t\t}\r\n///\r\n\r\n@mixin grid-margin-adjust($type: row, $margin-adjust: true) {\r\n\t\r\n\t@if $margin-adjust == true {\r\n\t\t\r\n\t\t@if $type == row {\r\n\t\t\tmargin-right: $gutter-width * -0.5;\r\n\t\t\tmargin-left: $gutter-width * -0.5;\r\n\t\t}\r\n\t\t///TODO: NOT SURE IF THIS SHOULD BE A THING OR NOT, PERHAPS THIS OPTION ISNT RELEVANT TO COLUMN GRIDS SINCE THERE IS NO TOP/BOTTOM MARGIN ON THE CONTAINER\r\n\t\t//@else if $type == column {\r\n\t\t//\tmargin-top: $gutter-width * -0.5;\r\n\t\t//\tmargin-bottom: $gutter-width * -0.5;\r\n\t\t//}\r\n\t}\r\n}\r\n\r\n///\r\n/// Set the number of columns an element spans on the grid and other behaviors such as prefix, suffix, grow, shrink, align, and order\r\n///\r\n/// @parameter {number|string} $cols [auto] - The number of columns the element should span. Values: `auto`, `max`, `#`\r\n/// @parameter {number} $prefix [0] - The number of columns that should prefix the element\r\n/// @parameter {number} $suffix [0] - The number of columns that should suffix the element\r\n/// @parameter {boolean|number} $grow [false] - Whether the column should grow or not or by what factor. Values: `true`, `false`, `#`\r\n/// @parameter {boolean|number} $shrink [false] - Whether the column should shrink or not or by what factor. Values: `true`, `false`, `#`\r\n/// @parameter {string} $align [auto] - Alignment method for the column on the cross axis (basically vertical align). Values: `auto`, `start`, `end`, `center`, `baseline`, `stretch`\r\n/// @parameter {boolean} $order [0] - Order to apply to the column order.\r\n///\r\n/// @example scss - Usage\r\n///\t\tdiv {\r\n///\t\t\t@include column;\r\n///\t\t}\r\n///\r\n\r\n@mixin column($cols: auto, $prefix: 0, $suffix: 0, $grow: false, $shrink: false, $align: auto, $order: 0) {\r\n\t\r\n\t//\r\n\t// force grow and shrink to true if a scaling number isnt provided ($cols: max/auto does not allow grow/shrink == 0/false)\r\n\t//\r\n\t\t\r\n\t@if $cols == max or $cols == auto {\r\n\t\t\r\n\t\t@if type-of($grow) != number or $grow == 0 {\r\n\t\t\t$grow: true;\r\n\t\t}\r\n\t\t\r\n\t\t@if type-of($shrink) != number or $shrink == 0 {\r\n\t\t\t$shrink: true;\r\n\t\t}\r\n\t}\r\n\t\r\n\t@include column-cols($cols);\r\n\t@include column-prefix($prefix);\r\n\t@include column-suffix($suffix);\r\n\t@include column-grow($grow);\r\n\t@include column-shrink($shrink);\r\n\t@include column-align($align);\r\n\t@include column-order($order);\r\n}\r\n\r\n///\r\n/// Set the number of columns an element spans on the grid\r\n///\r\n/// @parameter {number|string} $cols [auto] - The number of columns the element should span. Values: `auto`, `max`, `#`\r\n///\r\n/// @example scss - Usage\r\n///\t\tdiv {\r\n///\t\t\t@include column-cols(2);\r\n///\t\t}\r\n///\r\n\r\n@mixin column-cols($cols: auto) {\r\n\t\r\n\t@if $cols == max {\r\n\t\tflex-basis: 100%;\r\n\t}\r\n\t@else if $cols == auto {\r\n\t\tflex-basis: auto;\r\n\t}\r\n\t@else {\r\n\t\tflex-basis: $cols * ($column-width + $gutter-width) - $gutter-width;\r\n\t}\r\n}\r\n\r\n///\r\n/// Set the number of empty columns that should prefix the element on the grid\r\n///\r\n/// @parameter {number} $prefix [0] - The number of columns that should prefix the element\r\n///\r\n/// @example scss - Usage\r\n///\t\tdiv {\r\n///\t\t\t@include column-prefix(2);\r\n///\t\t}\r\n///\r\n\r\n@mixin column-prefix($cols: 0) {\r\n\tmargin-left: ($cols * ($column-width + $gutter-width)) + ($gutter-width / 2);\r\n}\r\n\r\n///\r\n/// Set the number of empty columns that should follow the element on the grid\r\n///\r\n/// @parameter {number} $suffix [0] - The number of columns that should suffix the element\r\n///\r\n/// @example scss - Usage\r\n///\t\tdiv {\r\n///\t\t\t@include column-suffix(2);\r\n///\t\t}\r\n///\r\n\r\n@mixin column-suffix($cols: 0) {\r\n\tmargin-right: ($cols * ($column-width + $gutter-width)) + ($gutter-width / 2);\r\n}\r\n\r\n///\r\n/// Set the column to automatically grow when there is available space\r\n///\r\n/// @parameter {boolean|number} $grow [true] - Whether the column should grow or not or by what factor. Values: `true`, `false`, `#`\r\n///\r\n/// @example scss - Usage\r\n///\t\tdiv {\r\n///\t\t\t@include column-grow(false);\r\n///\t\t}\r\n///\r\n\r\n@mixin column-grow($grow: true) {\r\n\t\r\n\t@if $grow == true {\r\n\t\tflex-grow: 1;\r\n\t}\r\n\t@else if $grow == false {\r\n\t\tflex-grow: 0;\r\n\t}\r\n\t@else {\r\n\t\tflex-grow: $grow;\r\n\t}\r\n}\r\n\r\n///\r\n/// Set the column to automatically shrink when there is not enough available space\r\n///\r\n/// @parameter {boolean|number} $shrink [true] - Whether the column should shrink or not or by what factor. Values: `true`, `false`, `#`\r\n///\r\n/// @example scss - Usage\r\n///\t\tdiv {\r\n///\t\t\t@include column-shrink(false);\r\n///\t\t}\r\n///\r\n\r\n@mixin column-shrink($shrink: true) {\r\n\t\r\n\t@if $shrink == true {\r\n\t\tflex-shrink: 1;\r\n\t}\r\n\t@else if $shrink == false {\r\n\t\tflex-shrink: 0;\r\n\t}\r\n\t@else {\r\n\t\tflex-shrink: $shrink;\r\n\t}\r\n}\r\n\r\n///\r\n/// Set the alignment on the column, this will override the default alignment on the grid container\r\n///\r\n/// @parameter {string} $align [auto] - Alignment method for the column on the cross axis (basically vertical align). Values: `auto`, `start`, `end`, `center`, `baseline`, `stretch`\r\n///\r\n/// @example scss - Usage\r\n///\t\tdiv {\r\n///\t\t\t@include column-align(center);\r\n///\t\t}\r\n///\r\n\r\n@mixin column-align($align: auto) {\r\n\t\r\n\t@if $align == auto {\r\n\t\talign-self: auto;\r\n\t}\r\n\t@else if $align == start {\r\n\t\talign-self: flex-start;\r\n\t}\r\n\t@else if $align == end {\r\n\t\talign-self: flex-end;\r\n\t}\r\n\t@else if $align == center {\r\n\t\talign-self: center;\r\n\t}\r\n\t@else if $align == baseline {\r\n\t\talign-self: baseline;\r\n\t}\r\n\t@else if $align == stretch {\r\n\t\talign-self: stretch;\r\n\t}\r\n}\r\n\r\n///\r\n/// Set the order of the column to override the normal ordering\r\n///\r\n/// @parameter {boolean} $order [0] - Order to apply to the column order.\r\n///\r\n/// @example scss - Usage\r\n///\t\tdiv {\r\n///\t\t\t@include column-order(-1);\r\n///\t\t}\r\n///\r\n\r\n@mixin column-order($order: 0) {\r\n\t\r\n\t//\r\n\t// css default is 0\r\n\t//\r\n\t\r\n\t@if $order != 0 {\r\n\t\torder: $order;\r\n\t}\r\n}\r\n\r\n///\r\n/// Define the font styles that position the font within the typographic grid\r\n///\r\n/// @parameter {number} $size - Numeric font size in unitless format\r\n///\r\n/// @example scss - Usage\r\n///\t\th3 {\r\n///\t\t\t@include font-size(2);\r\n///\t\t}\r\n///\r\n\r\n@mixin font-size($size) {\r\n\tfont-size: $size * 1em;\r\n\tline-height: line-height($size);\r\n\tmargin-top: $line-height / $size * 1em;\r\n\tmargin-bottom: $line-height / $size * 1em;\r\n}\r\n\r\n///\r\n/// Calculate the line height that will maintain vertical rhythm for the font size\r\n///\r\n/// @parameter {number} $size - Numeric font size in unitless format\r\n///\r\n/// @example scss - Usage\r\n///\t\th3 {\r\n///\t\t\t@include line-height(2);\r\n///\t\t}\r\n///\r\n\r\n@function line-height($size) {\r\n\t$lines-needed: ceil($size / $line-height);\r\n\r\n\t@return ($line-height / $size * $lines-needed);\r\n}\r\n\r\n///\r\n/// Convert Pixels to Em units (unitless)\r\n///\r\n/// @parameter {number} $pixels - Numeric number of pixels in unitless format\r\n/// @parameter {number} $base [$base-font-size] - Numeric base font size in unitless format\r\n///\r\n/// @example scss - Usage\r\n///\t\tselect {\r\n///\t\t\tpadding-top: em(2) * 1em; // 0.125em\r\n///\t\t}\r\n///\r\n\r\n@function em($pixels, $base: $base-font-size) {\r\n\t@return $pixels / ($base * 16);\r\n}\r\n\r\n///\r\n/// Convert Em units to Pixels (unitless)\r\n///\r\n/// @parameter {number} $ems - Numeric number of ems in unitless format\r\n/// @parameter {number} $base [$base-font-size] - Numeric base font size in unitless format\r\n///\r\n/// @example scss - Usage\r\n///\t\tselect {\r\n///\t\t\tpadding-top: px(0.125) * 1px; // 2px\r\n///\t\t}\r\n///\r\n\r\n@function px($ems, $base: $base-font-size) {\r\n\t@return $ems * $base * 16;\r\n}\r\n\r\n///\r\n/// Clear any children within the element\r\n///\r\n/// @example scss - Usage\r\n///\t\tsection {\r\n///\t\t\t@include clear-children;\r\n///\t\t}\r\n///\r\n\r\n@mixin clear-children() {\r\n\t&:after {\r\n\t\tcontent: \"\";\r\n\t\tdisplay: table;\r\n\t\tclear: both;\r\n\t}\r\n}"]}