{"version":3,"sources":["pages/referrals.scss","pages/referrals.css","../lib/watercolor/modules/_grid.scss"],"names":[],"mappings":"AAQA,cAGE,eAAgB,CAChB,QAAS,CACT,SAAU,CACV,eAAgB,CAChB,sBAAe,CAAf,mBAAe,CAAf,cAAe,CACf,sBAAe,CAAf,mBAAe,CAAf,cCTF,CCgDC,sCF/CD,cAWG,sBAAe,CAAf,mBAAe,CAAf,cCPD,CACF,CDLA,cAgBE,iCAAmB,CAAnB,8BAAmB,CAAnB,kBAAmB,CACnB,eCPF,CDVA,sBAqBE,QAAS,CACT,kBCPF,CCgCC,sCF/CD,sBAyBY,cCLV,CACF,CC0BC,sCF/CD,sBA6BY,cCHV,CACF,CD3BA,wBAiCG,gBCFH,CD/BA,2BAqCG,eAAgB,CAChB,iBCFH","file":"referrals.css","sourcesContent":["@import \"site/settings\";\r\n@import \"watercolor/modules/grid\";\r\n\r\n//\r\n// Referrals\r\n//\r\n\r\n\r\n#referrals {\r\n\r\n\tul {\r\n\t\tlist-style: none;\r\n\t\tmargin: 0;\r\n\t\tpadding: 0;\r\n\t\ttext-align: left;\r\n\t\tcolumn-count: 1;\r\n\t\tcolumn-gap: 1em;\r\n\r\n\t\t@include breakpoint(large) {\r\n\t\t\tcolumn-count: 2;\r\n\t\t}\r\n\t}\r\n\r\n\tli {\r\n\t\tbreak-inside: avoid;\r\n\t\tpadding: 1em 0 0 0;\r\n\t}\r\n\r\n\tblockquote {\r\n\t\tmargin: 0;\r\n\t\ttext-align: justify;\r\n\r\n\t\t@include breakpoint(large) {\r\n            margin: $line-height * .5em;\r\n        }\r\n\r\n\t\t@include breakpoint(extra-large) {\r\n            margin: $line-height * 1em;\r\n        }\r\n\r\n\t\tp {\r\n\t\t\tmargin: $line-height * .5em 0;\r\n\t\t}\r\n\r\n\t\tcite {\r\n\t\t\tfont-weight: 400;\r\n\t\t\tfont-style: normal;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// #referrals {\r\n\r\n// \tul {\r\n// \t\tlist-style: none;\r\n// \t\tmargin: $line-height * 1em 0;\r\n// \t\tpadding: 0;\r\n// \t\t@include grid;\r\n// \t}\r\n\r\n// \tli {\r\n// \t\tmargin: 0 0 $line-height * 1em 0;\r\n\r\n// \t\t@include column;\r\n\r\n// \t\t@include breakpoint(large) {\r\n//             @include column(6);\r\n//         }\r\n\r\n// \t\t@include breakpoint(extra-large) {\r\n//             @include column(8);\r\n//         }\r\n// \t}\r\n\r\n// \tblockquote {\r\n// \t\tmargin: 0;\r\n// \t\ttext-align: justify;\r\n\r\n// \t\t@include breakpoint(large) {\r\n//             margin: $line-height * .5em;\r\n//         }\r\n\r\n// \t\t@include breakpoint(extra-large) {\r\n//             margin: $line-height * 1em;\r\n//         }\r\n\r\n// \t\tcite {\r\n// \t\t\tfont-weight: 400;\r\n// \t\t\tfont-style: normal;\r\n// \t\t}\r\n// \t}\r\n// }","#referrals ul {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n  text-align: left;\n  column-count: 1;\n  column-gap: 1em;\n}\n\n@media screen and (min-width: 61.5rem) {\n  #referrals ul {\n    column-count: 2;\n  }\n}\n\n#referrals li {\n  break-inside: avoid;\n  padding: 1em 0 0 0;\n}\n\n#referrals blockquote {\n  margin: 0;\n  text-align: justify;\n}\n\n@media screen and (min-width: 61.5rem) {\n  #referrals blockquote {\n    margin: 0.8125em;\n  }\n}\n\n@media screen and (min-width: 81.5rem) {\n  #referrals blockquote {\n    margin: 1.625em;\n  }\n}\n\n#referrals blockquote p {\n  margin: 0.8125em 0;\n}\n\n#referrals blockquote cite {\n  font-weight: 400;\n  font-style: normal;\n}\n","ï»¿////\r\n///\r\n/// Grid related mixins to help style the grid container, columns, and text\r\n///\r\n/// @group grid\r\n/// @author Clint Kolodziej\r\n///\r\n////\r\n\r\n@import \"../defaults/grid\";\r\n\r\n///\r\n/// Build the container based on the breakpoint settings (default breakpoints are: default, small, medium, large, extra-large)\r\n///\r\n/// @example scss - Usage\r\n///\t\t.container {\r\n///\t\t\t@include container;\r\n///\t\t}\r\n///\r\n\r\n@mixin container() {\r\n\tbox-sizing: border-box;\r\n\tmargin: 0 auto;\r\n\tpadding-right: $gutter-width * 0.5;\r\n\tpadding-left: $gutter-width * 0.5;\r\n\t\r\n\t@each $size, $cols in $breakpoints {\r\n\t\t\t\t\r\n\t\t@if $size == default {\r\n\t\t\twidth: $cols * ($column-width + $gutter-width);\r\n\t\t}\r\n\t\t@else {\r\n\t\t\t@include breakpoint($size) {\r\n\t\t\t\twidth: $cols * ($column-width + $gutter-width);\r\n\t\t\t}\r\n\t\t}\r\n\t}\t\r\n}\r\n\r\n///\r\n/// Insert the given content within a media query given the breakpoint size\r\n///\r\n/// @parameter {number} $point - The breakpoint that the content should be applied to. Values: `default`, `small`, `medium`, `large`, `extra-large` (if using grid defaults)\r\n///\r\n/// @example scss - Usage\r\n///\t\tdiv {\r\n///\t\t\t@include breakpoint(large) {\r\n///\t\t\t\tcolor: red;\r\n///\t\t\t}\r\n///\t\t}\r\n///\r\n\r\n@mixin breakpoint($point) {\r\n\t$break: ($column-width + $gutter-width) * map-get($breakpoints, $point) + $gutter-width;\r\n\t\r\n\t@media screen and (min-width: $break) {\r\n\t\t@content;\r\n\t}\r\n}\r\n\r\n///\r\n/// Set the element as a grid container with given type, direction, margin-adjustment, wrapping, justification, and alignment\r\n///\r\n/// @parameter {string} $type [row] - Type of grid. Values: `row`, `column`\r\n/// @parameter {string} $direction [forward] - Direction that the grid items should follow. Values: `forward`, `reverse`\r\n/// @parameter {string} $wrap [wrap] - Should the content be wrapped or not. Values: `wrap`, `no-wrap`, `reverse`\r\n/// @parameter {string} $justify [start] - How to justify the columns within the available space. Values: `start`, `end`, `center`, `between`, `around`\r\n/// @parameter {string} $align-items [stretch] - Alignment method for child columns on the cross axis (basically vertical align for child columns). Values: `stretch`, `start`, `end`, `center`, `baseline`\r\n/// @parameter {string} $align-content [stretch] - Alignment method for the grid content on the cross axis (basically vertical align for the entire content of the grid). Values: `stretch`, `start`, `end`, `center`, `between`, `around`\r\n/// @parameter {boolean} $margin-adjust [true] - Whether the grid should adjust the outer margin to allow it to align with non-grid content. Values: `true`, `false`\r\n///\r\n/// @example scss - Usage\r\n///\t\tsection {\r\n///\t\t\t@include grid;\r\n///\t\t}\r\n///\r\n\r\n@mixin grid($type: row, $direction: forward, $wrap: wrap, $justify: start, $align-items: stretch, $align-content: stretch, $margin-adjust: true) {\r\n\t@include grid-type($type, $direction);\r\n\t@include grid-wrap($wrap);\r\n\t@include grid-justify($justify);\t\r\n\t@include grid-align-items($align-items);\r\n\t@include grid-align-content($align-content);\r\n\t@include grid-margin-adjust($type, $margin-adjust);\r\n}\r\n\r\n///\r\n/// Set the element as a specific grid type and direction\r\n///\r\n/// @parameter {string} $type [row] - Type of grid. Values: `row`, `column`\r\n/// @parameter {string} $direction [forward] - Direction that the grid items should follow. Values: `forward`, `reverse`\r\n///\r\n/// @example scss - Usage\r\n///\t\tsection {\r\n///\t\t\t@include grid-type($type: row, $direction: reverse);\r\n///\t\t}\r\n///\r\n\r\n@mixin grid-type($type: row, $direction: forward) {\r\n\t\r\n\tdisplay: flex;\r\n\t\r\n\t@if $type == row {\r\n\t\r\n\t\t@if $direction == forward {\r\n\t\t\tflex-direction: row;\r\n\t\t}\t\r\n\t\t@else if $direction == reverse {\r\n\t\t\tflex-direction: row-reverse;\r\n\t\t}\t\r\n\t}\r\n\t@else if $type == column {\r\n\t\t\r\n\t\t@if $direction == forward {\r\n\t\t\tflex-direction: column;\r\n\t\t}\r\n\t\t@else if $direction == reverse {\r\n\t\t\tflex-direction: column-reverse;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n///\r\n/// Set how the grid will deal with content that is longer than one line\r\n///\r\n/// @parameter {string} $wrap [wrap] - Should the content be wrapped or not. Values: `wrap`, `no-wrap`, `reverse`\r\n///\r\n/// @example scss - Usage\r\n///\t\tsection {\r\n///\t\t\t@include grid-wrap(no-wrap);\r\n///\t\t}\r\n///\r\n\r\n@mixin grid-wrap($wrap: wrap) {\r\n\t\r\n\t@if $wrap == no-wrap {\r\n\t\tflex-wrap: nowrap;\r\n\t}\r\n\t@if $wrap == wrap {\r\n\t\tflex-wrap: wrap;\r\n\t}\r\n\t@else if $wrap == reverse {\r\n\t\tflex-wrap: wrap-reverse;\r\n\t}\r\n}\r\n\r\n///\r\n/// Set how the grid will justify content when there is unused space on a line\r\n///\r\n/// @parameter {string} $justify [start] - How to justify the columns within the available space. Values: `start`, `end`, `center`, `between`, `around`\r\n///\r\n/// @example scss - Usage\r\n///\t\tsection {\r\n///\t\t\t@include grid-justify(center);\r\n///\t\t}\r\n///\r\n\r\n@mixin grid-justify($justify: start) {\r\n\t\r\n\t@if $justify == start {\r\n\t\tjustify-content: flex-start;\r\n\t}\t\r\n\t@if $justify == end {\r\n\t\tjustify-content: flex-end;\r\n\t}\r\n\t@else if $justify == center {\r\n\t\tjustify-content: center;\r\n\t}\r\n\t@else if $justify == between {\r\n\t\tjustify-content: space-between;\r\n\t}\r\n\t@else if $justify == around {\r\n\t\tjustify-content: space-around;\r\n\t}\r\n}\r\n\r\n///\r\n/// Set how the grid will vertically align child elements by default and how the entire grid content vertically aligns when there is extra space\r\n///\r\n/// @parameter {string} $align-items [stretch] - Alignment method for child columns on the cross axis (basically vertical align for child columns). Values: `stretch`, `start`, `end`, `center`, `baseline`\r\n/// @parameter {string} $align-content [stretch] - Alignment method for the grid content on the cross axis (basically vertical align for the entire content of the grid). Values: `stretch`, `start`, `end`, `center`, `between`, `around`\r\n///\r\n/// @example scss - Usage\r\n///\t\tsection {\r\n///\t\t\t@include grid-align(center, center);\r\n///\t\t}\r\n///\r\n\r\n@mixin grid-align($align-items: stretch, $align-content: stretch) {\t\r\n\t@include grid-align-items($align-items);\r\n\t@include grid-align-content($align-content);\r\n}\r\n\t\r\n///\r\n/// Set how the grid will vertically align child elements by default\r\n///\r\n/// @parameter {string} $align [stretch] - Alignment method for child columns on the cross axis (basically vertical align for child columns). Values: `stretch`, `start`, `end`, `center`, `baseline`\r\n///\r\n/// @example scss - Usage\r\n///\t\tsection {\r\n///\t\t\t@include grid-align-items(end);\r\n///\t\t}\r\n///\r\n\r\n@mixin grid-align-items($align: stretch) {\r\n\t\r\n\t@if $align == stretch {\r\n\t\talign-items: stretch;\r\n\t}\t\r\n\t@else if $align == start {\r\n\t\talign-items: flex-start;\r\n\t}\r\n\t@else if $align == end {\r\n\t\talign-items: flex-end;\r\n\t}\r\n\t@else if $align == center {\r\n\t\talign-items: center;\r\n\t}\r\n\t@else if $align == baseline {\r\n\t\talign-items: baseline;\r\n\t}\r\n}\r\n\r\n///\r\n/// Set how the entire grid content vertically aligns when there is extra space\r\n///\r\n/// @parameter {string} $align [stretch] - Alignment method for the grid content on the cross axis (basically vertical align for the entire content of the grid). Values: `stretch`, `start`, `end`, `center`, `between`, `around`\r\n///\r\n/// @example scss - Usage\r\n///\t\tsection {\r\n///\t\t\t@include grid-align-content(center);\r\n///\t\t}\r\n///\r\n\r\n@mixin grid-align-content($align: stretch) {\r\n\t\r\n\t@if $align == stretch {\r\n\t\talign-content: stretch;\r\n\t}\t\r\n\t@else if $align == start {\r\n\t\talign-content: flex-start;\r\n\t}\r\n\t@else if $align == end {\r\n\t\talign-content: flex-end;\r\n\t}\r\n\t@else if $align == center {\r\n\t\talign-content: center;\r\n\t}\r\n\t@else if $align == between {\r\n\t\talign-content: space-between;\r\n\t}\r\n\t@else if $align == around {\r\n\t\talign-content: space-around;\r\n\t}\r\n}\r\n\r\n///\r\n/// Set how the grid adjusts the margin to allow it to align with non-grid content\r\n///\r\n/// @parameter {boolean} $margin-adjust [true] - Whether the grid should adjust the outer margin to allow it to align with non-grid content. Values: `true`, `false`\r\n///\r\n/// @example scss - Usage\r\n///\t\tsection {\r\n///\t\t\t@include grid-margin-adjust($type: row, $margin-adjust: false);\r\n///\t\t}\r\n///\r\n\r\n@mixin grid-margin-adjust($type: row, $margin-adjust: true) {\r\n\t\r\n\t@if $margin-adjust == true {\r\n\t\t\r\n\t\t@if $type == row {\r\n\t\t\tmargin-right: $gutter-width * -0.5;\r\n\t\t\tmargin-left: $gutter-width * -0.5;\r\n\t\t}\r\n\t\t///TODO: NOT SURE IF THIS SHOULD BE A THING OR NOT, PERHAPS THIS OPTION ISNT RELEVANT TO COLUMN GRIDS SINCE THERE IS NO TOP/BOTTOM MARGIN ON THE CONTAINER\r\n\t\t//@else if $type == column {\r\n\t\t//\tmargin-top: $gutter-width * -0.5;\r\n\t\t//\tmargin-bottom: $gutter-width * -0.5;\r\n\t\t//}\r\n\t}\r\n}\r\n\r\n///\r\n/// Set the number of columns an element spans on the grid and other behaviors such as prefix, suffix, grow, shrink, align, and order\r\n///\r\n/// @parameter {number|string} $cols [auto] - The number of columns the element should span. Values: `auto`, `max`, `#`\r\n/// @parameter {number} $prefix [0] - The number of columns that should prefix the element\r\n/// @parameter {number} $suffix [0] - The number of columns that should suffix the element\r\n/// @parameter {boolean|number} $grow [false] - Whether the column should grow or not or by what factor. Values: `true`, `false`, `#`\r\n/// @parameter {boolean|number} $shrink [false] - Whether the column should shrink or not or by what factor. Values: `true`, `false`, `#`\r\n/// @parameter {string} $align [auto] - Alignment method for the column on the cross axis (basically vertical align). Values: `auto`, `start`, `end`, `center`, `baseline`, `stretch`\r\n/// @parameter {boolean} $order [0] - Order to apply to the column order.\r\n///\r\n/// @example scss - Usage\r\n///\t\tdiv {\r\n///\t\t\t@include column;\r\n///\t\t}\r\n///\r\n\r\n@mixin column($cols: auto, $prefix: 0, $suffix: 0, $grow: false, $shrink: false, $align: auto, $order: 0) {\r\n\t\r\n\t//\r\n\t// force grow and shrink to true if a scaling number isnt provided ($cols: max/auto does not allow grow/shrink == 0/false)\r\n\t//\r\n\t\t\r\n\t@if $cols == max or $cols == auto {\r\n\t\t\r\n\t\t@if type-of($grow) != number or $grow == 0 {\r\n\t\t\t$grow: true;\r\n\t\t}\r\n\t\t\r\n\t\t@if type-of($shrink) != number or $shrink == 0 {\r\n\t\t\t$shrink: true;\r\n\t\t}\r\n\t}\r\n\t\r\n\t@include column-cols($cols);\r\n\t@include column-prefix($prefix);\r\n\t@include column-suffix($suffix);\r\n\t@include column-grow($grow);\r\n\t@include column-shrink($shrink);\r\n\t@include column-align($align);\r\n\t@include column-order($order);\r\n}\r\n\r\n///\r\n/// Set the number of columns an element spans on the grid\r\n///\r\n/// @parameter {number|string} $cols [auto] - The number of columns the element should span. Values: `auto`, `max`, `#`\r\n///\r\n/// @example scss - Usage\r\n///\t\tdiv {\r\n///\t\t\t@include column-cols(2);\r\n///\t\t}\r\n///\r\n\r\n@mixin column-cols($cols: auto) {\r\n\t\r\n\t@if $cols == max {\r\n\t\tflex-basis: 100%;\r\n\t}\r\n\t@else if $cols == auto {\r\n\t\tflex-basis: auto;\r\n\t}\r\n\t@else {\r\n\t\tflex-basis: $cols * ($column-width + $gutter-width) - $gutter-width;\r\n\t}\r\n}\r\n\r\n///\r\n/// Set the number of empty columns that should prefix the element on the grid\r\n///\r\n/// @parameter {number} $prefix [0] - The number of columns that should prefix the element\r\n///\r\n/// @example scss - Usage\r\n///\t\tdiv {\r\n///\t\t\t@include column-prefix(2);\r\n///\t\t}\r\n///\r\n\r\n@mixin column-prefix($cols: 0) {\r\n\tmargin-left: ($cols * ($column-width + $gutter-width)) + ($gutter-width / 2);\r\n}\r\n\r\n///\r\n/// Set the number of empty columns that should follow the element on the grid\r\n///\r\n/// @parameter {number} $suffix [0] - The number of columns that should suffix the element\r\n///\r\n/// @example scss - Usage\r\n///\t\tdiv {\r\n///\t\t\t@include column-suffix(2);\r\n///\t\t}\r\n///\r\n\r\n@mixin column-suffix($cols: 0) {\r\n\tmargin-right: ($cols * ($column-width + $gutter-width)) + ($gutter-width / 2);\r\n}\r\n\r\n///\r\n/// Set the column to automatically grow when there is available space\r\n///\r\n/// @parameter {boolean|number} $grow [true] - Whether the column should grow or not or by what factor. Values: `true`, `false`, `#`\r\n///\r\n/// @example scss - Usage\r\n///\t\tdiv {\r\n///\t\t\t@include column-grow(false);\r\n///\t\t}\r\n///\r\n\r\n@mixin column-grow($grow: true) {\r\n\t\r\n\t@if $grow == true {\r\n\t\tflex-grow: 1;\r\n\t}\r\n\t@else if $grow == false {\r\n\t\tflex-grow: 0;\r\n\t}\r\n\t@else {\r\n\t\tflex-grow: $grow;\r\n\t}\r\n}\r\n\r\n///\r\n/// Set the column to automatically shrink when there is not enough available space\r\n///\r\n/// @parameter {boolean|number} $shrink [true] - Whether the column should shrink or not or by what factor. Values: `true`, `false`, `#`\r\n///\r\n/// @example scss - Usage\r\n///\t\tdiv {\r\n///\t\t\t@include column-shrink(false);\r\n///\t\t}\r\n///\r\n\r\n@mixin column-shrink($shrink: true) {\r\n\t\r\n\t@if $shrink == true {\r\n\t\tflex-shrink: 1;\r\n\t}\r\n\t@else if $shrink == false {\r\n\t\tflex-shrink: 0;\r\n\t}\r\n\t@else {\r\n\t\tflex-shrink: $shrink;\r\n\t}\r\n}\r\n\r\n///\r\n/// Set the alignment on the column, this will override the default alignment on the grid container\r\n///\r\n/// @parameter {string} $align [auto] - Alignment method for the column on the cross axis (basically vertical align). Values: `auto`, `start`, `end`, `center`, `baseline`, `stretch`\r\n///\r\n/// @example scss - Usage\r\n///\t\tdiv {\r\n///\t\t\t@include column-align(center);\r\n///\t\t}\r\n///\r\n\r\n@mixin column-align($align: auto) {\r\n\t\r\n\t@if $align == auto {\r\n\t\talign-self: auto;\r\n\t}\r\n\t@else if $align == start {\r\n\t\talign-self: flex-start;\r\n\t}\r\n\t@else if $align == end {\r\n\t\talign-self: flex-end;\r\n\t}\r\n\t@else if $align == center {\r\n\t\talign-self: center;\r\n\t}\r\n\t@else if $align == baseline {\r\n\t\talign-self: baseline;\r\n\t}\r\n\t@else if $align == stretch {\r\n\t\talign-self: stretch;\r\n\t}\r\n}\r\n\r\n///\r\n/// Set the order of the column to override the normal ordering\r\n///\r\n/// @parameter {boolean} $order [0] - Order to apply to the column order.\r\n///\r\n/// @example scss - Usage\r\n///\t\tdiv {\r\n///\t\t\t@include column-order(-1);\r\n///\t\t}\r\n///\r\n\r\n@mixin column-order($order: 0) {\r\n\t\r\n\t//\r\n\t// css default is 0\r\n\t//\r\n\t\r\n\t@if $order != 0 {\r\n\t\torder: $order;\r\n\t}\r\n}\r\n\r\n///\r\n/// Define the font styles that position the font within the typographic grid\r\n///\r\n/// @parameter {number} $size - Numeric font size in unitless format\r\n///\r\n/// @example scss - Usage\r\n///\t\th3 {\r\n///\t\t\t@include font-size(2);\r\n///\t\t}\r\n///\r\n\r\n@mixin font-size($size) {\r\n\tfont-size: $size * 1em;\r\n\tline-height: line-height($size);\r\n\tmargin-top: $line-height / $size * 1em;\r\n\tmargin-bottom: $line-height / $size * 1em;\r\n}\r\n\r\n///\r\n/// Calculate the line height that will maintain vertical rhythm for the font size\r\n///\r\n/// @parameter {number} $size - Numeric font size in unitless format\r\n///\r\n/// @example scss - Usage\r\n///\t\th3 {\r\n///\t\t\t@include line-height(2);\r\n///\t\t}\r\n///\r\n\r\n@function line-height($size) {\r\n\t$lines-needed: ceil($size / $line-height);\r\n\r\n\t@return ($line-height / $size * $lines-needed);\r\n}\r\n\r\n///\r\n/// Convert Pixels to Em units (unitless)\r\n///\r\n/// @parameter {number} $pixels - Numeric number of pixels in unitless format\r\n/// @parameter {number} $base [$base-font-size] - Numeric base font size in unitless format\r\n///\r\n/// @example scss - Usage\r\n///\t\tselect {\r\n///\t\t\tpadding-top: em(2) * 1em; // 0.125em\r\n///\t\t}\r\n///\r\n\r\n@function em($pixels, $base: $base-font-size) {\r\n\t@return $pixels / ($base * 16);\r\n}\r\n\r\n///\r\n/// Convert Em units to Pixels (unitless)\r\n///\r\n/// @parameter {number} $ems - Numeric number of ems in unitless format\r\n/// @parameter {number} $base [$base-font-size] - Numeric base font size in unitless format\r\n///\r\n/// @example scss - Usage\r\n///\t\tselect {\r\n///\t\t\tpadding-top: px(0.125) * 1px; // 2px\r\n///\t\t}\r\n///\r\n\r\n@function px($ems, $base: $base-font-size) {\r\n\t@return $ems * $base * 16;\r\n}\r\n\r\n///\r\n/// Clear any children within the element\r\n///\r\n/// @example scss - Usage\r\n///\t\tsection {\r\n///\t\t\t@include clear-children;\r\n///\t\t}\r\n///\r\n\r\n@mixin clear-children() {\r\n\t&:after {\r\n\t\tcontent: \"\";\r\n\t\tdisplay: table;\r\n\t\tclear: both;\r\n\t}\r\n}"]}