#gallery-add .field{position:relative;display:block;float:none;margin:1.625em 0;padding:0}#gallery-add .field label{display:block;overflow:hidden;white-space:nowrap;text-overflow:ellipsis;position:relative;top:auto;left:auto;width:auto}#dialog-alert,#page-alert{margin:1.625em 0}#galleries #galleries-list{padding:0;list-style:none;display:flex;flex-direction:row;flex-wrap:wrap;justify-content:flex-start;align-items:stretch;align-content:stretch;margin-right:-.75rem;margin-left:-.75rem}#galleries #galleries-list li{position:relative;margin-bottom:1.625em;cursor:pointer;flex-basis:auto;margin-left:.75rem;margin-right:.75rem;flex-grow:1;flex-shrink:1;align-self:auto}@media screen and (min-width:41.5rem){#galleries #galleries-list li{flex-basis:18.5rem;margin-left:.75rem;margin-right:.75rem;flex-grow:0;flex-shrink:0;align-self:auto}}#galleries #galleries-list li img,#galleries #images-list li img{display:block}#galleries #images-list{max-height:14em;overflow-y:scroll;padding:0;list-style:none}#galleries #images-list li{float:left;position:relative;box-sizing:border-box;width:33.3333%;padding:.25em;margin-bottom:.25em}#galleries #images-list li img:hover{outline:#aaa solid 4px}#galleries #images-list li[data-selected=true] img{outline:#28f solid 4px}#galleries .delete{position:absolute;top:-.5em;right:-.5em;width:1.25em;height:1.25em;background-color:#c20;border-radius:50%;box-shadow:0 2px 5px rgba(0,0,0,.25);color:#fff;font-weight:400;line-height:1.25em;vertical-align:middle;cursor:pointer}#galleries .delete::before{content:'\00d7'}#gallery-add h2{margin-top:0}#gallery-add form{text-align:left}#gallery-add form input{width:100%}#gallery-add p{text-align:right}#gallery-add .buttons{clear:both;margin-top:1.625em;text-align:center}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
